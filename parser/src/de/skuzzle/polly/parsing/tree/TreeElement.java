package de.skuzzle.polly.parsing.tree;

import java.io.Serializable;
import java.util.Stack;

import de.skuzzle.polly.parsing.ExecutionException;
import de.skuzzle.polly.parsing.InputParser;
import de.skuzzle.polly.parsing.ParseException;
import de.skuzzle.polly.parsing.declarations.Namespace;
import de.skuzzle.polly.parsing.tree.literals.Literal;




/**
 * The is the  super interface for all elements in the abstract syntax tree
 * generated by the {@link InputParser}. It provides the interface to two methods for
 * context checking and executing the context checked tree.
 * 
 * @author Simon
 *
 */
public interface TreeElement extends Cloneable, Serializable {
    
    /**
     * This method is for context checking of each tree element. If any other tree element
     * contains other tree elements (in the meaning of a 'has-a' relationship) this
     * method would recursively call {@code contextCheck} on each sub element.
     * If so, invoking this method on the root of the tree would mean to check the 
     * whole tree.
     * 
     * This method is meant to return the Expression that should be inserted in the tree 
     * at this elements position. This grants the ability to replace Expressions within
     * the tree while context checking.
     * 
     * @param context The context in which this tree element is checked.
     * @return An expression that should replace the current tree element in the syntax 
     *      tree - this must not be a new object but can be {@code this} if this element
     *      should not be replaced.
     * @throws ParseException if any context error such as type-mismatch occur during
     *      context checking.
     */
    public abstract Expression contextCheck(Namespace context) 
            throws ParseException;
    
    
    
    /**
     * This method does the execution for this tree element using a stack. After 
     * context-checking this method must never fail for reasons of context errors.
     * Invoking this method before {@link #contextCheck(Context)} will result in 
     * entering an undefined state of execution.
     * 
     * If this method calls {@code collapse} on each of its sub elements, invoking
     * {@code collapse} on the root of the tree to collapse the whole tree.
     * 
     * If you obey the above, {@link #contextCheck(Context)} will ensure that the stack
     * by the time of calling this method will exactly contain the expected literals.
     * 
     * @param stack The stack used for execution. This method may modify it in any way.
     * @throws ExecutionException if a runtime error such as division by zero occurs. This
     *      can not be covered by {@link #contextCheck(Context)}.
     */
    public abstract void collapse(Stack<Literal> stack) 
            throws ExecutionException;

    
}
