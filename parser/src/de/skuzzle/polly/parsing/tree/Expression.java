package de.skuzzle.polly.parsing.tree;


import de.skuzzle.polly.parsing.InputParser;
import de.skuzzle.polly.parsing.Position;
import de.skuzzle.polly.parsing.Type;


/**
 * This is the superclass for all kinds of Expressions parsed by the {@link InputParser}.
 * Each Expression has a {@link Type} and a {@link Position} within the input stream.
 * 
 * The latter must not always be a valid position in the parsed String as there can be
 * Expressions that already existed before parsing (like any custom declaration of 
 * variables or functions which are stored persistent).
 * 
 * @author Simon
 *
 */
public abstract class Expression implements TreeElement {

    private static final long serialVersionUID = 1L;
    

    /**
     * The {@link Type} of this Expression. This may be {@code Type.UNKNOWN} by the
     * time of syntax analysis.
     */
    private Type type;
    
    /**
     * The {@link Position} of this Expression. It always spans the whole Expression
     * if the Expression is generated by the parser (thus, is not predefined).
     */
    private Position position;
    

    
    /**
     * Creates a new Expression with given {@link Type} and {@link Position}
     * @param position The Position of this expression.
     * @param type The type of this expression.
     */
    public Expression(Position position, Type type) {
        this.position = position;
        this.type = type;
    }
    
    
    
    /**
     * Creates a new Expression with unknown type. The type may than be resolved by
     * context analysis.
     * @param position The Position of this expression.
     * @see #contextCheck(de.skuzzle.polly.parsing.Context)
     */
    public Expression(Position position) {
        this(position, Type.UNKNOWN);
    }
    
   
    
    
    /**
     * The {@link Type} of this Expression.
     * @return Returns the Type of this Expression.
     */
    public Type getType() {
        return this.type;
    }
    
    
    
    /**
     * Sets the {@link Type} of this Expression. May be used by 
     * {@link #contextCheck(de.skuzzle.polly.parsing.Context)} to dynamically infer the type of 
     * this Expression.
     * @param type The new {@link Type} of this Expression.
     */
    protected void setType(Type type) {
        this.type = type;
    }
    
    
    
    /**
     * Gets the {@link Position} of this Expression.
     * @return The Position of this Expression.
     */
    public Position getPosition() {
        return this.position;
    }
    
    
    
    /**
     * Sets the {@link Position} of this Expression. This may be necessary of the 
     * complete string-span of an Expression cannot be determined by the time it is
     * constructed. The Position can then by corrected using this method.
     * @param position The new Position of this Expression.
     */
    public void setPosition(Position position) {
        this.position = position;
    }
}