root        -> ':' ID (expr (WS expr)*)?                  // AST root with a WS separated list of expressions

expr        -> relation '->' PUBLIC? TEMP? (ID | ESCAPED) // assignment of relation to identifier X
relation    -> conjunction (REL_OP conjunction)*          // relation (<,>,<=,>=,==, !=)
conjunction -> disjunction (CONJ_OP disjunction)*         // conjunction (||)
disjunction -> secTerm (DISJ_OP secTerm)*                 // disjunction (&&)
secTerm     -> term (SECTERM_OP term)*                    // plus minus
term        -> factor (TERM_OP factor)*                   // multiplication and co
factor      -> postfix (FACTOR_OP factor)?                // right-associative (power operator)
postfix     -> autolist (POSTFIX_OP autolist)*            // postfix operator
autolist    -> dotdot (';' dotdot)*                       // implicit list literal
dotdot      -> unary ('..' unary ('$' unary)?)?           // range operator with optional step size
unary       -> UNARY_OP unary                             // right-associative unary operator
             | call
call        -> access ( '(' parameters ')' )?
access      -> literal ('.' literal)?                     // namespace access. left operand must be a single identifier (represented by a VarAccess)
literal     -> ID                                         // VarAccess
             | ESCAPED                                    // token escape
             | '(' expr ')'                               // braced expression
             | '\(' parameters ':' expr ')'               // lambda function literal
             | '{' exprList '}'                           // concrete list of expressions
             | DELETE '(' ID (',' ID)* ')'                // delete operator
             | IF expr '?' expr ':' expr                  // conditional operator
             | TRUE | FALSE                               // boolean literal
             | CHANNEL                                    // channel literal
             | USER                                       // user literal
             | STRING                                     // string literal
             | NUMBER                                     // number literal
             | DATETIME                                   // date literal
             | TIMESPAN                                   // timespan literal

exprList    -> (expr (',' expr)*)?
parameters  -> (parameter (',' parameter)*)?
parameter   -> type ID
type        -> ID                                         // typename, parameter name
             | ID<ID>                                     // type name, subtype name, parameter name
             | '\(' ID (' ' ID)+ ')'                      // return type name, parameter type names, parameter name
             
WS       -> ' ' | \t
TEMP     -> 'temp'
PUBLIC   -> 'public'
IF       -> 'if'
TRUE     -> 'true'
FALSE    -> 'false'
CHANNEL  -> '#' ID
USER     -> '@' ID
STRING   -> '"' .* '"'
NUMBER   -> [0-9]*(\.[0-9]+([eE][0-9]+)?)?
TIMESPAN -> ([0-9]+[ywdhms])+
DATE     -> [0-9]{1,2}\.[0-9]{1,2}\.[0-9]{4}
TIME     -> [0-9]{1,2}:[0-9]{1,2}
DATETIME -> TIME | DATE | DATE '@' TIME
ID     -> [_a-zA-Z][_a-zA-Z0-9]+
